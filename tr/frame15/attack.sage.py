

# This file was *autogenerated* from the file attack.sage
from sage.all_cmdline import *   # import sage library

_sage_const_147733349387696521015664992396355145811249793103958464053225389476050097503928022819269482555955365534137156079172704297584033078453033637103720972881068435459202133846880715879894340131656691631756162323422868846616160423755883726450486845175227682329583615739797782025647376042249605775433971714513081755709 = Integer(147733349387696521015664992396355145811249793103958464053225389476050097503928022819269482555955365534137156079172704297584033078453033637103720972881068435459202133846880715879894340131656691631756162323422868846616160423755883726450486845175227682329583615739797782025647376042249605775433971714513081755709); _sage_const_3 = Integer(3); _sage_const_52253817590056116368273294519761274350847193477090280916373828903718796358618956145225746496960677477661151583828604021049936963779103440560630451125137344639503705880024677345063113240530798352727432768980751992926293801206779839157443722614687126711272753610923903360818026083573711899014859313677159790039 = Integer(52253817590056116368273294519761274350847193477090280916373828903718796358618956145225746496960677477661151583828604021049936963779103440560630451125137344639503705880024677345063113240530798352727432768980751992926293801206779839157443722614687126711272753610923903360818026083573711899014859313677159790039); _sage_const_0 = Integer(0); _sage_const_8 = Integer(8); _sage_const_21 = Integer(21); _sage_const_448 = Integer(448); _sage_const_416 = Integer(416)
n = _sage_const_147733349387696521015664992396355145811249793103958464053225389476050097503928022819269482555955365534137156079172704297584033078453033637103720972881068435459202133846880715879894340131656691631756162323422868846616160423755883726450486845175227682329583615739797782025647376042249605775433971714513081755709 
e = _sage_const_3 
c = _sage_const_52253817590056116368273294519761274350847193477090280916373828903718796358618956145225746496960677477661151583828604021049936963779103440560630451125137344639503705880024677345063113240530798352727432768980751992926293801206779839157443722614687126711272753610923903360818026083573711899014859313677159790039 
a = b'\x98vT2\x10\xab\xcd\xef\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00m A to B'

from Crypto.Util.number import long_to_bytes,bytes_to_long
qian_zhui = a[_sage_const_0  :_sage_const_8  ]
# print(qian_zhui)
q = bytes_to_long(qian_zhui)

P = PolynomialRing(Zmod(n), names=('x',)); (x,) = P._first_ngens(1)
for i in range(_sage_const_21 ):
    try:
        m = (q<<_sage_const_448  ) + (i<<_sage_const_416  ) + x
        f = m**e - c
        r = f.small_roots()
        print(i,r)
        print(long_to_bytes(r[_sage_const_0 ]))
    except:
        continue


