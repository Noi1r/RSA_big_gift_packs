n = 147733349387696521015664992396355145811249793103958464053225389476050097503928022819269482555955365534137156079172704297584033078453033637103720972881068435459202133846880715879894340131656691631756162323422868846616160423755883726450486845175227682329583615739797782025647376042249605775433971714513081755709
e = 3
c = 52253817590056116368273294519761274350847193477090280916373828903718796358618956145225746496960677477661151583828604021049936963779103440560630451125137344639503705880024677345063113240530798352727432768980751992926293801206779839157443722614687126711272753610923903360818026083573711899014859313677159790039
a = b'\x98vT2\x10\xab\xcd\xef\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00m A to B'

from Crypto.Util.number import long_to_bytes,bytes_to_long
qian_zhui = a[0 :8 ]
# print(qian_zhui)
q = bytes_to_long(qian_zhui)

P.<x>=PolynomialRing(Zmod(n))
for i in range(21):
    try:
        m = (q<<448 ) + (i<<416 ) + x
        f = m^e - c
        r = f.small_roots()
        print(i,r)
        print(long_to_bytes(r[0]))
    except:
        continue

